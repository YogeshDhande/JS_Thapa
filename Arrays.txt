javascript Array is an object that represents a collection of similar type of elements.
Each value will be called as element.

iterable - object where you can use for-of loop
array like object - any object with length property and use indexes to access them
array as object - array in javascript are a specific type of object that has numeric keys and length property, the indices are automatically maintained, the length property is automatically update when you add or remove element from array.

let arr = []
console.log(typeof arr)        -- object


Using Array Constructor
 let fruits = new Array("Apple", "Banana", "Guawa")

Using Array Literals
 let fruits = ["Apple", "Banana", "Guawa"]

We can Create empty array
 let arr = []


1. Accessing the element
   console.log(fruits[0])

2.Modifying the array
  let fruits = ["Apple", "Banana", "Guawa"]
  fruits[2] = "Mango"

3. Array traversal/iterating over array
    let fruits = ["Apple", "Banana", "Guawa","Mango", "Grapes"]
          1.For of loop                          -- it will give values(apple,banana,mango)
               for(let item of fruits)
                 console.log(item)

          2.for in loop                         -- it will give index values(0,1,2,3,4)
               for(let item in fruits)
                 console.log(item) 

4. Foreach loop

   when you use Anonymous funtion and you have to return a value, so by using foeach loop when you return a value it will give 'undefined'
   
   arrayName.forEach(Function 
   callback(currentValue,index, arrayName){
    //business logic
   }, thisvalue);

  fruits.forEach(curElem, index, arr) =>{
    console.log(`${curElem}` ${index})
  }
                                                   -- apple 0 , banana 1....
  fruits.forEach(curElem, index, arr) =>{
    console.log(arr)
  }                                                 -- apple , banana, Guawa, mango...
                                                       apple , banana, Guawa, mango...

5. map loop

      when you use Anonymous funtion and you have to return a value, so by using foeach loop when you return a value it will give exactly the same as return statement.

  arrayName.forEach(Function 
   callback(currentValue,index, arrayName){
    //business logic
   }, thisvalue);


   fruits.map(curElem, index, arr) =>{
    console.log(`${curElem}` ${index})
  }
                                                   -- apple 0 , banana 1....
  fruits.map(curElem, index, arr) =>{
    console.log(arr)
  }                                                 -- apple , banana, Guawa, mango...
                                                       apple , banana, Guawa, mango...


1. at()
  which helps to index from last element in array 
  